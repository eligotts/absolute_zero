"""Centralized prompt templates for Absolute Zero Reasoner (AZR).

All templates are copied verbatim from absolute_zero.py.
"""

# AZR instruction wrapper (verbatim)
INSTRUCTION_FOLLOWING = (
    "A conversation between User and Assistant. The user asks a question, and the Assistant solves it. "
    "The assistant first thinks about the reasoning process in the mind and then provides the user with the answer. "
    "The reasoning process and answer are enclosed within <think> </think> and <answer> </answer> tags, respectively, i.e., "
    # "<think> reasoning process here </think> <answer> answer here </answer>. User: {}\nAssistant: <think>"
    "<think> reasoning process here </think> <answer> answer here </answer>. Here is the task: {}"
    "REMEMBER TO ANSWER IN THE REQUIRED <think> and <answer> tags, and within the answer, return content in the required fenced-block format for the task (e.g., ```python```, ```input```, ```output```, and/or ```message``` blocks). Do not include extra prose outside the required blocks. IT IS IMPERATIVE THAT YOU WRAP YOUR ANSWER IN THE REQUIRED FENCED-BLOCK FORMAT, AND THAT THESE FENCED-BLOCKS ARE WRAPPED IN THE <answer></answer> TAGS."

)

# Default system prompt used to seed datasets. Dynamic task prompts are injected during rollout.
BASE_SYSTEM_PROMPT = (
    "Wrap internal reasoning in <think>...</think> and the final answer in <answer>...</answer>. "
    "Inside <answer>, return content in the required fenced-block format for the task (e.g., ```python```, ```input```, "
    "```output```, and/or ```message``` blocks). Do not include extra prose outside the required blocks. IT IS IMPERATIVE THAT YOU WRAP YOUR ANSWER IN THE REQUIRED FENCED-BLOCK FORMAT."
)

# Solver (predictor) prompts
CODE_OUTPUT_PREDICTOR_PROMPT = "\n".join([
    "# Task: Deduce the Output of a Python Code Snippet Given the Code and Input",
    "Given the following Code Snippet and the Input, think step by step then deduce the output that will be produced from plugging the Input into the Code Snippet. Put your output in ```output``` tags. Remember if the output is a string, wrap it in quotes. If the function returns multiple values, remember to use a tuple to wrap them.",
    "",
    "# Code Snippet:",
    "```python",
    "{snippet}",
    "```",
    "",
    "# Input:",
    "```input",
    "{input_args}",
    "```",
    "",
    "# Example Output:",
    "```output",
    "{{'age': 20, 'city': 'New York'}}",
    "```",
])

CODE_INPUT_PREDICTOR_PROMPT = "\n".join([
    "# Task: Provide One Possible Input of a Python Code Snippet Given the Code and Output",
    "Given the following Code Snippet and the Output, think step by step then provide one possible input that produced the output. The input needs to be wrapped in ```input``` tags. Remember if an argument is a string, wrap it in quotes. If the function requires multiple arguments, separate them with commas.",
    "",
    "# Code Snippet:",
    "```python",
    "{snippet}",
    "```",
    "",
    "# Output:",
    "```output",
    "{output}",
    "```",
    "",
    "# Output Format:",
    "```input",
    "arg1, arg2, ...",
    "```",
    "# Example Output:",
    "```input",
    "'John', {{'age': 20, 'city': 'New York'}}",
    "```",
])

CODE_FUNCTION_PREDICTOR_PROMPT = "\n".join([
    "# Task: Deduce the Function that Produced the Outputs from the Inputs",
    "Given a set of input/output pairs and a message that describes the function, think through the problem step by step to deduce a general code snippet. This code should produce the hidden outputs from the hidden inputs, matching the original data-generating code that created the input/output pairs. Place your final answer inside python tags! It may be helpful to work through each input/output pair individually to test your function. If your function doesn't work as expected, revise it until it does. The final code snippet will be used to evaluate your response, which is wrapped in ```python``` tags.",
    "",
    "# Code Requirements:",
    "- Name the entry function `f` (e.g., `def f(...): ...`), you can have nested definitions inside `f`",
    "- Ensure the function returns a value",
    "- Include at least one input parameter",
    "- Make the function deterministic",
    "- AVOID THE FOLLOWING:",
    "  * Random functions or variables",
    "  * Date/time operations",
    "  * I/O operations (reading files, network requests)",
    "  * Printing or logging",
    "  * Any external state",
    "  * Import statements (NO imports allowed - use only built-in functions)",
    "- Ensure execution completes within 10 seconds on a modern CPU",
    "- Custom classes are allowed and should be defined at the very top of the code snippet",
    "- NO import statements of any kind - only use built-in functions like abs, len, max, min, sum, etc.",
    "- The snippet should end with a return statement from the main function `f()`, anything after will be removed",
    "",
    "# Input and Output Pairs:",
    "{input_output_pairs}",
    "",
    "# Message:",
    "```message",
    "{message}",
    "```",
    "",
    "# Example Output:",
    "```python",
    "def f(a):",
    "    return a",
    "```",
    "",
    "Name your entry function `f()`!!!",
])

# Proposer prompts
PROPOSE_DEDUCTION_PROMPT = "\n".join([
    "## Task: Create a New Python Code Snippet (where custom classes are allowed, which should be defined at the top of the code snippet) with one Matching Input",
    "",
    "Using the reference code snippets provided below as examples, design a new and unique Python code snippet that demands deep algorithmic reasoning to deduce the output from the input. Your submission should include a code snippet and a test input pair, where the input will be plugged into the code snippet to produce the output. The input will be given to a test subject to deduce the output, which is meant to be an I.Q. test.",
    "",
    "### Code Requirements:",
    "- Name the entry function `f` (e.g., `def f(...): ...`), you can have nested definitions inside `f`",
    "- Ensure the function returns a value",
    "- Include at least one input parameter",
    "- Make the function deterministic",
    "- Determinism: The program must produce the same output when run multiple times with the same input.",
    "- Make the snippet require state tracking across multiple data transformations, ensuring the task requires long multi step reasoning",
    "- AVOID THE FOLLOWING:",
    "  * Random functions or variables",
    "  * Date/time operations",
    "  * I/O operations (reading files, network requests)",
    "  * Printing or logging",
    "  * Any external state",
    "  * Import statements (NO imports allowed - use only built-in functions)",
    "- Ensure execution completes within 10 seconds on a modern CPU",
    "- Custom classes are allowed and should be defined at the very top of the code snippet",
    "- NO import statements of any kind - only use built-in functions like abs, len, max, min, sum, etc.",
    "- The snippet should end with a return statement from the main function `f`, anything after will be removed",
    "### Input Requirements:",
    "- Provide exactly one test input for your function",
    "- For functions with multiple parameters, format as a JSON array: [arg1, arg2, ...]",
    "- For functions with single parameter, provide the value directly",
    "- IMPORTANT: If your single parameter expects a list/dict, wrap it in an extra array: [[1,2,3]] or [{\"key\": \"value\"}]",
    "- Remember to add quotes around string arguments",
    "- Do NOT quote arrays/objects - input must be real JSON, not a string",
    "",
    "### Formatting:",
    "- Format your code with:",
    "```python",
    "def f(...):",
    "    # your code here",
    "    return ...",
    "```",
    "- Format your input with:",
    "```input",
    "arg1, arg2, ...",
    "```",
    "",
    "### Example Format:",
    "```python",
    "def f(name: str, info: dict):",
    "    # code logic here",
    "    return result",
    "```",
    "",
    "```input",
    "['John', {'age': 20, 'city': 'New York'}]",
    "```",
    "",
    "### Input Format Examples:",
    "- Single parameter: \"Hello World\" or 42 or [[1, 2, 3]] (note extra brackets for lists)",
    "- Multiple parameters: [\"John\", {\"age\": 20}] or [5, 10, \"test\"]",
    "- Single parameter expecting list: [[1,2,3]] not [1,2,3]",
    "",
    "### Evaluation Criteria:",
    "- Executability, your code should be executable given your input",
    "- Difficulty in predicting your ```input``` from 1) your ```python``` code and 2) the deterministic ```output``` that will be obtained from your ```input```. Focus on either algorithmic reasoning or logic complexity. For example, you can define complex data structure classes and operate on them like trees, heaps, stacks, queues, graphs, etc, or use complex control flow, dynamic programming, recursions, divide and conquer, greedy, backtracking, etc",
    "- Creativity, the code needs to be sufficiently different from the provided reference snippets",
    "- Restricted usage of certain keywords and packages, you are not allowed to use the following words in any form, even in comments: <|BANNED_KEYWORDS|>",
    "",
    "### Answer Format (CRITICAL):",
    "Return your final answer using fenced blocks inside <answer>:",
    "",
    "<answer>",
    "```python",
    "def f(...):",
    "    return ...",
    "```",
    "",
    "```input",
    "arg1, arg2, ...",
    "```",
    "</answer>",
    "",
    "First, carefully devise a clear plan: e.g., identify how your snippet will be challenging, distinct from reference snippets, and creative. Then, write the final code snippet and its inputs.",
    "",
    "### Reference Code Snippets:",
])

PROPOSE_ABDUCTION_PROMPT = "\n".join([
    "## Task: Create a Python Code Snippet (where custom classes are allowed, which should be defined at the top of the code snippet) with one Matching Input",
    "",
    "Using the reference code snippets provided below as examples, design a new and unique Python code snippet that demands deep algorithmic reasoning to deduce one possible input from a given output. Your submission should include both a code snippet and test input pair, where the input will be plugged into the code snippet to produce the output, which that function output be given to a test subject to come up with any input that will produce the same function output. This is meant to be an I.Q. test.",
    "",
    "### Code Requirements:",
    "- Name the entry function `f` (e.g., `def f(...): ...`), you can have nested definitions inside `f`",
    "- Ensure the function returns a value",
    "- Include at least one input parameter",
    "- Make the function deterministic",
    "- Determinism: The program must produce the same output when run multiple times with the same input.",
    "- Make the snippet require state tracking across multiple data transformations, ensuring the task requires long multi step reasoning",
    "- AVOID THE FOLLOWING:",
    "  * Random functions or variables",
    "  * Date/time operations",
    "  * I/O operations (reading files, network requests)",
    "  * Printing or logging",
    "  * Any external state",
    "  * Import statements (NO imports allowed - use only built-in functions)",
    "- Ensure execution completes within 10 seconds on a modern CPU",
    "- Custom classes are allowed and should be defined at the very top of the code snippet",
    "- NO import statements of any kind - only use built-in functions like abs, len, max, min, sum, etc.",
    "- The snippet should end with a return statement from the main function `f`, anything after will be removed",
    "### Input Requirements:",
    "- Provide exactly one test input for your function",
    "- For functions with multiple parameters, format as a JSON array: [arg1, arg2, ...]",
    "- For functions with single parameter, provide the value directly",
    "- IMPORTANT: If your single parameter expects a list/dict, wrap it in an extra array: [[1,2,3]] or [{\"key\": \"value\"}]",
    "- Remember to add quotes around string arguments",
    "- Do NOT quote arrays/objects - input must be real JSON, not a string",
    "",
    "### Formatting:",
    "- Format your code with: ```python",
    "  def f(...):",
    "      # your code here",
    "      return ...",
    "  ```",
    "- Format your input with: ```input",
    "  arg1, arg2, ...",
    "  ```",
    "",
    "### Example Format:",
    "```python",
    "def f(name: str, info: dict):",
    "    # code logic here",
    "    return result",
    "```",
    "",
    "```input",
    "['John', {'age': 20, 'city': 'New York'}]",
    "```",
    "",
    "### Input Format Examples:",
    "- Single parameter: \"Hello World\" or 42 or [[1, 2, 3]] (note extra brackets for lists)",
    "- Multiple parameters: [\"John\", {\"age\": 20}] or [5, 10, \"test\"]",
    "- Single parameter expecting list: [[1,2,3]] not [1,2,3]",
    "",
    "### Evaluation Criteria:",
    "- Executability, your code should be executable given your input",
    "- Difficulty in predicting the output from your provided input and code snippet. Focus on either algorithmic reasoning or logic complexity. For example, you can define complex data structure classes and operate on them like trees, heaps, stacks, queues, graphs, etc, or use complex control flow, dynamic programming, recursions, divide and conquer, greedy, backtracking, etc",
    "- Creativity, the code needs to be sufficiently different from the provided reference snippets",
    "- Restricted usage of certain keywords and packages, you are not allowed to use the following words in any form, even in comments: <|BANNED_KEYWORDS|>",
    "",
    "### Answer Format (CRITICAL):",
    "Return your final answer using fenced blocks inside <answer>:",
    "",
    "<answer>",
    "```python",
    "def f(...):",
    "    return ...",
    "```",
    "",
    "```input",
    "arg1, arg2, ...",
    "```",
    "</answer>",
    "",
    "First, carefully devise a clear plan: e.g., identify how your snippet will be challenging, distinct from reference snippets, and creative. Then, write the final code snippet and its inputs.",
    "",
    "### Reference Code Snippets:",
])

PROPOSE_INDUCTION_PROMPT = "\n".join([
    "## Task: Output {num_inputs} Inputs that can be plugged into the following Code Snippet to produce diverse Outputs, and give a message related to the given snippet.",
    "",
    "Using the code snippet provided below, design {num_inputs} inputs that can be plugged into the code snippet to produce a diverse set of outputs. A subset of your given input and its deterministically produced outputs will be given to a test subject to deduce the function, which is meant to be an I.Q. test. You can also leave a message to the test subject to help them deduce the code snippet.",
    "",
    "### Input Requirements:",
    "- Provide {num_inputs} valid inputs for the code snippet",
    "- For each input, format multiple arguments with commas between them",
    "- Remember to add quotes around string arguments",
    "- Each input should be individually wrapped in ```input``` tags",
    "",
    "### Message Requirements:",
    "- Leave a message to the test subject to help them deduce the code snippet",
    "- The message should be wrapped in ```message``` tags",
    "- The message can be in any form, can even be formed into a coding question, or a natural language instruction what the code snippet does",
    "- You cannot provide the code snippet in the message",
    "",
    "### Formatting:",
    "- Format your input with:",
    "```input",
    "arg1, arg2, ...",
    "```",
    "",
    "### Example Format:",
    "```input",
    "'John', {{'age': 20, 'city': 'New York'}}",
    "```",
    "```input",
    "'Sammy', {{'age': 37, 'city': 'Los Angeles'}}",
    "```",
    "",
    "### Evaluation Criteria:",
    "- Executability, your code should be executable given your inputs",
    "- Coverage, the inputs and outputs should cover the whole input space of the code snippet, able to deduce the code snippet from the inputs and outputs",
    "- Creativity, the inputs need to be sufficiently different from each other",
    "- The overall selection of inputs and message combined should be challenging for the test subject, but not impossible for them to solve",
    "First, carefully devise a clear plan: e.g., understand the code snippet, then identify how your proposed inputs have high coverage, and why the inputs will be challenging and creative. Then, write the inputs and message. Remember to wrap your inputs in ```input``` tags, and your message in ```message``` tags.",
    "",
    "### Code Snippet:",
    "```python",
    "{snippet}",
    "```",
    "",
    "### Answer Format (CRITICAL):",
    "Return your final answer using fenced blocks inside <answer>:",
    "",
    "<answer>",
    "```message",
    "your helpful hint here",
    "```",
    "",
    "```input",
    "arg1, arg2, ...",
    "```",
    "(repeat ```input``` blocks {num_inputs} times)",
    "</answer>",
])


